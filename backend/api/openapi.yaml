#
# CSE183 Assignment 8 Backend
#

openapi: '3.0.3'

info:
  description: CSE183 Assignment 8 Backend
  version: 0.1.0
  title: CSE183 Assignment 8 Backend

servers:
  - url: http://localhost:3010/v0

paths:
  /dummy:
    get:
      description: Dummy Endpoint
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DummyResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /authenticate:
    post:
      description: Authenticate a login
      requestBody:
        description: Login details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionToken'
        401:
          description: Username or password incorrect
          content:
            application/json:
              schema:
                type: string
  /newuser:
    post:
      description: Create a new user
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        200:
          description: User created
        409:
          description: User already exists
  # Unfinished
  # /items:
  #   get:
  #     description: Get listed items
  #     responses:
  #       200:
  #         description: Successful
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ItemList'
  #       400:
  #         description: Invalid search value
  #       404:
  #         description: No items found
  /item:
    get:
      description: Get a specific item
      parameters:
        - name: id
          in: query
          description: Item id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        404:
          description: Item not found
    # Unfinished
    # post:
    #   description: Post a new item
    #   requestBody:
    #     description: Item to post
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Item'
    #   responses:
    #     201:
    #       description: Item successfully listed
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Item'
    #     401:
    #       description: Unauthorized
    #     409:
    #       description: Item already listed

components:
  schemas:
    Error:
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message

    DummyResponse:
      properties:
        message:
          type: string
      required:
        - message

    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        id:
          type: string
          format: uuid
      required:
        - name
        - email
        - id
      additionalProperties: false

    NewUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - name
        - email
        - password
      additionalProperties: false

    LoginUser:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
      additionalProperties: false

    SessionToken:
      type: object
      properties:
        owner:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string

    Category:
      type: object
      properties:
        name:
          type: string
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        attributeList:
          type: array
          items:
            type: string
            pattern: '^\w+$'
      required:
        - name
      additionalProperties: false

    Item:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/Category'
        attributes:
          type: object
        id:
          type: string
          format: uuid
      required:
        - category
        - attributes
      additionalProperties: false

    ItemList:
      type: array
      items:
        $ref: '#/components/schemas/Item'

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
