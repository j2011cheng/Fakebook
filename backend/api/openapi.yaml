#
# CSE183 Assignment 8 Backend
#

openapi: '3.0.3'

info:
  description: CSE183 Assignment 8 Backend
  version: 0.1.0
  title: CSE183 Assignment 8 Backend

servers:
  - url: http://localhost:3010/v0

paths:
  /dummy:
    get:
      description: Dummy Endpoint
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DummyResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /authenticate:
    post:
      description: Authenticate a login
      requestBody:
        description: Login details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionToken'
        401:
          description: Username or password incorrect
          content:
            application/json:
              schema:
                type: string
  /newuser:
    post:
      description: Create a new user
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: User created
        409:
          description: User already exists
  /listings:
    get:
      description: Get listed items
      parameters:
        - in: query
          name: category
          description: Category of items
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: owner
          description: Owner of items
          required: false
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingList'
        400:
          description: Invalid search value
        404:
          description: No items found
  /listing/{id}:
    get:
      description: Get a specific listing
      parameters:
        - name: id
          in: path
          description: Listing id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingFull'
        404:
          description: Listing not found
  /search:
    get:
      description: Search listings by keyword
      requestBody:
        description: Search string
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                search:
                  type: string
                  pattern: '^(?:\S+ )*(?:\S+)$'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingList'
        400:
          description: Invalid search value
        404:
          description: No items found
  /filter:
    get:
      description: Filter listings by attributes
      requestBody:
        description: Dictionary of filters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    $ref: '#/components/schemas/Filter'
                values:
                  type: array
              required:
                - filters
                - values
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingList'
        400:
          description: Must have same number of filters and values
        404:
          description: No items found
  /listing:
    post:
      description: Create a new listing
      requestBody:
        description: Listing details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingNew'
      security:
        - bearerAuth: []
      responses:
        201:
          description: Listing created
        400:
          description: Invalid listing
  /category:
    get:
      description: Get a category
      parameters:
        - name: category
          in: query
          description: category id
          required: false
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Got Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        404:
          description: Category not found
  /filters:
    get:
      description: Get filters for a category
      parameters:
        - name: category
          in: query
          description: category id
          required: false
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Got filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterList'
        404:
          description: Category does not exist
  /response/{id}:
    get:
      description: View responses to a listing
      parameters:
        - name: id
          in: path
          description: Id of user
          required: true
          schema:
            type: string
            format: uuid
        - name: listing
          in: query
          description: Id of listing
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          description: Must be logged in to view responses
        404:
          description: This listing has no responses
    post:
      description: Respond to a listing
      parameters:
        - name: id
          in: path
          description: Id of listing that is responded to
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Response message
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      security:
        - bearerAuth: []
      responses:
        201:
          description: Response created
        401:
          description: Must be logged in to respond to a listing
        404:
          description: Listing not found

components:
  schemas:
    Error:
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message

    DummyResponse:
      properties:
        message:
          type: string
      required:
        - message

    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        id:
          type: string
          format: uuid
        phone:
          type: string
      required:
        - name
        - email
        - id
      additionalProperties: false

    NewUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        phone:
          type: string
      required:
        - name
        - email
        - password
      additionalProperties: false

    LoginUser:
      type: object
      properties:
        loginName:
          type: string
        password:
          type: string
      required:
        - loginName
        - password
      additionalProperties: false

    SessionToken:
      type: object
      properties:
        owner:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string

    CategoryResponse:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/Category'
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        filters:
          type: array
          items:
            type: string
            pattern: '^\w+$'
      required:
        - category
      additionalProperties: false

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    Listing:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
      required:
        - id
        - name
        - price
        - image
      additionalProperties: false

    ListingFull:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/Category'
        owner:
          $ref: '#/components/schemas/User'
        attributes:
          type: object
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
          minItems: 1
      required:
        - category
        - owner
        - attributes
        - id
        - name
        - description
        - images
      additionalProperties: false

    ListingNew:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/Category'
        owner:
          $ref: '#/components/schemas/User'
        attributes:
          type: object
        name:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
        images:
          type: array
          items:
            type: string
      required:
        - category
        - owner
        - attributes
        - name
        - price
        - description
        - images
      additionalProperties: false

    ListingList:
      type: array
      items:
        $ref: '#/components/schemas/Listing'

    Filter:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [range, enum, bool]
        options:
          type: array
          items:
            type: string
      required:
        - name
        - type
      additionalProperties: false

    FilterList:
      type: array
      items:
        $ref: '#/components/schemas/Filter'

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
